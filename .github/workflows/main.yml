name: Deploy Python Lambda

on:
  push:
    branches:
      - '*'

jobs:
  deploy-frontend:
      runs-on: ubuntu-latest

      steps:
        - name: Checkout Repository
          uses: actions/checkout@v2

        - name: Set up Node.js
          uses: actions/setup-node@v2

        - name: Install Dependencies
          run: npm install  # or yarn install if you use yarn
          working-directory: idp-frontend

        - name: Build React App
          run: npm run build  # or yarn build if you use yarn
          working-directory: idp-frontend

        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: 'eu-west-1'  # replace with your AWS region

        - name: Deploy to S3
          run: aws s3 sync ./build/ s3://devgurus-frontend-deployment-bucket
          working-directory: idp-frontend

  deploy-fetch-data:
    runs-on: ubuntu-latest
    name: deploy-fetch-data

    env:
      NODE_VERSION: 14.x
    strategy:
      matrix:
        python-version:
          - 3.11
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: Install dependencies
        run: |
          cd fetch-data
          python -m pip install --upgrade pip
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install Node dependencies (specifically, serverless-python-requirements)
        run: |
          cd fetch-data
          npm install

      - name: Serverless Deploy
        run:
          npx serverless deploy
        working-directory: ./fetch-data
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  deploy-process-data-lambda:
    runs-on: ubuntu-latest
    name: deploy-process-data-lambda
    env:
      NODE_VERSION: 14.x
    strategy:
      matrix:
        python-version:
          - 3.11
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: Install dependencies
        run: |
          cd process-data
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install Node dependencies (specifically, serverless-python-requirements)
        run: |
          cd process-data
          npm install

      - name: Serverless Deploy
        run: 
          npx serverless deploy
        working-directory: ./process-data
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  deploy-serverless-api:
    runs-on: ubuntu-latest
    name: deploy-serverless-api-lambda
    env:
      NODE_VERSION: 14.x
    strategy:
      matrix:
        python-version:
          - 3.11
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: Install dependencies
        run: |
          cd serverless-api
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install Node dependencies (specifically, serverless-python-requirements)
        run: |
          cd serverless-api
          npm install

      - name: Serverless Deploy
        run:
          npx serverless deploy
        working-directory: ./serverless-api
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

