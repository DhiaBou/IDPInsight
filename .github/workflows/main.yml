name: Deploy Python Lambda

on:
  push:
    branches:
      - '*'

jobs:
  deploy-frontend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'  # specify your Node.js version

    - name: Install Dependencies
      run: npm install
      working-directory: ./frontend/idp-frontend

    - name: Build
      run: npm run build
      working-directory: ./frontend/idp-frontend

    - name: Deploy to AWS S3
      uses: jakejarvis/s3-sync-action@v0.5.1
      with:
        args: --acl public-read --follow-symlinks --delete
      env:
        AWS_S3_BUCKET: devgurus-frontend-deployment-bucket
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: 'eu-west-1'  # e.g., us-west-2
        SOURCE_DIR: './frontend/idp-frontend/build'


  deploy-fetch-data:
    needs: deploy-frontend

    name: deploy-fetch-data
    runs-on: ubuntu-latest
    env:
      NODE_VERSION: 14.x # used for installing the serverless-python-requirements dependency from NPM
    strategy:
      matrix:
        python-version:
          - 3.11 # with a build matrix, you can specify a list of python versions to deploy with
    steps:
      # --------- use Python to install Python dependencies and run linter, tests, etc. ---------
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v2
        with:
          # This path is specific to Ubuntu
          path: ~/.cache/pip
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: Install dependencies
        run: |
          cd fetch-data
          python -m pip install --upgrade pip
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      # --------- Use Node and NPM to install serverless-python-requirements ---------
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install Node dependencies (specifically, serverless-python-requirements)
        run: |
          cd fetch-data
          npm install

      - name: Serverless Deploy
        run:
          npx serverless deploy
        working-directory: ./fetch-data # Specify your directory
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  deploy-process-data-lambda:
    needs: deploy-fetch-data

    name: deploy-process-data-lambda
    runs-on: ubuntu-latest
    env:
      NODE_VERSION: 14.x # used for installing the serverless-python-requirements dependency from NPM
    strategy:
      matrix:
        python-version:
          - 3.11 # with a build matrix, you can specify a list of python versions to deploy with
    steps:
      # --------- use Python to install Python dependencies and run linter, tests, etc. ---------
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v2
        with:
          # This path is specific to Ubuntu
          path: ~/.cache/pip
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: Install dependencies
        run: |
          cd process-data
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      # --------- Use Node and NPM to install serverless-python-requirements ---------
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install Node dependencies (specifically, serverless-python-requirements)
        run: |
          cd process-data
          npm install

      - name: Serverless Deploy
        run: 
          npx serverless deploy
        working-directory: ./process-data # Specify your directory
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

